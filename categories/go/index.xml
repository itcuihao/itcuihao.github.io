<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on haoc7</title>
    <link>http://cuihao.fun/categories/go/</link>
    <description>Recent content in Go on haoc7</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn-zh</language>
    <copyright>Copyright (c) 2018 -, haoc7; all rights reserved.</copyright>
    <lastBuildDate>Sat, 11 Jun 2022 12:44:51 +0800</lastBuildDate><atom:link href="http://cuihao.fun/categories/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[译]Go并发代码审查</title>
      <link>http://cuihao.fun/post/go%E5%B9%B6%E5%8F%91%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%A0%B8/</link>
      <pubDate>Sat, 11 Jun 2022 12:44:51 +0800</pubDate>
      
      <guid>http://cuihao.fun/post/go%E5%B9%B6%E5%8F%91%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%A0%B8/</guid>
      <description>本页是对Go代码审查意见列表的补充。这个列表的目的是为了帮助在审查Go代码时发现与并发有关的bug。</description>
    </item>
    
    <item>
      <title>[译]Go代码审查意见</title>
      <link>http://cuihao.fun/post/go%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%A0%B8%E8%A7%A3%E9%87%8A/</link>
      <pubDate>Sat, 11 Jun 2022 09:49:33 +0800</pubDate>
      
      <guid>http://cuihao.fun/post/go%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%A0%B8%E8%A7%A3%E9%87%8A/</guid>
      <description>本页收集了审查Go代码时的常见解释，以便于通过速记来参考单一的详细解释。这是一份常见错误的清单，而不是一份全面的风格指南。</description>
    </item>
    
    <item>
      <title>Go Build</title>
      <link>http://cuihao.fun/post/go-build/</link>
      <pubDate>Sun, 19 Dec 2021 23:16:12 +0800</pubDate>
      
      <guid>http://cuihao.fun/post/go-build/</guid>
      <description>Go常利用此命令进行编译打包</description>
    </item>
    
    <item>
      <title>Go Timer</title>
      <link>http://cuihao.fun/post/go-timer/</link>
      <pubDate>Sat, 11 Dec 2021 21:59:22 +0800</pubDate>
      
      <guid>http://cuihao.fun/post/go-timer/</guid>
      <description>定时器是经常使用的</description>
    </item>
    
    <item>
      <title>配置文件热更新</title>
      <link>http://cuihao.fun/post/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%83%AD%E6%9B%B4%E6%96%B0/</link>
      <pubDate>Tue, 24 Sep 2019 07:40:49 +0800</pubDate>
      
      <guid>http://cuihao.fun/post/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%83%AD%E6%9B%B4%E6%96%B0/</guid>
      <description>想要使程序在不重启的前提下读取更新的配置文件，探索了以下几种方式： 信号量触发更新 API手动触发更新 监听文件触发更新 使用第三方包 一、信号量触发更新 对系统进程调用监</description>
    </item>
    
    <item>
      <title>Go的位操作四则运算实现</title>
      <link>http://cuihao.fun/post/go%E7%9A%84%E4%BD%8D%E6%93%8D%E4%BD%9C%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 02 Aug 2018 00:26:55 +0800</pubDate>
      
      <guid>http://cuihao.fun/post/go%E7%9A%84%E4%BD%8D%E6%93%8D%E4%BD%9C%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E5%AE%9E%E7%8E%B0/</guid>
      <description>package main import &amp;quot;fmt&amp;quot; func main() { a := 2 b := 2 fmt.Println(add(a, b)) fmt.Println(sub(a, b)) fmt.Println(mul(a, b)) fmt.Println(div(a, b)) } func add(a, b int) int { if b == 0 { return a } tmp := 0 for b != 0 { tmp = (a &amp;amp; b) &amp;lt;&amp;lt; 1 a = a ^ b b = tmp } return a } func addr(a, b int) int { if b == 0 { return a } tmp := (a</description>
    </item>
    
    <item>
      <title>Catch and Redirect Panic</title>
      <link>http://cuihao.fun/post/catch-and-redirect-panic/</link>
      <pubDate>Mon, 30 Jul 2018 22:11:59 +0800</pubDate>
      
      <guid>http://cuihao.fun/post/catch-and-redirect-panic/</guid>
      <description>面试的时候，面试官问程序panic了该怎么办；那就recover呀；后来想了下是不是守护进程呀。 那panic之后一般log会随着后台log一起打印，这样就不方便</description>
    </item>
    
  </channel>
</rss>
