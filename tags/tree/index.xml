<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tree on haoc7</title>
    <link>http://cuihao.fun/tags/tree/</link>
    <description>Recent content in tree on haoc7</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn-zh</language>
    <copyright>Copyright (c) 2018 -, haoc7; all rights reserved.</copyright>
    <lastBuildDate>Sun, 21 Apr 2019 19:35:37 +0800</lastBuildDate>
    
	<atom:link href="http://cuihao.fun/tags/tree/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>BinaryTreee的遍历</title>
      <link>http://cuihao.fun/ports/binarytreee%E7%9A%84%E9%81%8D%E5%8E%86/</link>
      <pubDate>Sun, 21 Apr 2019 19:35:37 +0800</pubDate>
      
      <guid>http://cuihao.fun/ports/binarytreee%E7%9A%84%E9%81%8D%E5%8E%86/</guid>
      <description>在二叉树中有各种各样的遍历算法，下面然我们来看看它们是怎么实现的。 二叉树的结构： type TreeNode struct { Val int Left *TreeNode Right *TreeNode } 递归 前序遍历 func preorderTraversal(root *TreeNode) []int { var l []int if root == nil { return l } l = append(l, root.Val) l = append(l,</description>
    </item>
    
    <item>
      <title>树中两个节点的最低公共祖先</title>
      <link>http://cuihao.fun/ports/%E6%A0%91%E4%B8%AD%E4%B8%A4%E4%B8%AA%E8%8A%82%E7%82%B9%E7%9A%84%E6%9C%80%E4%BD%8E%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</link>
      <pubDate>Mon, 15 Apr 2019 07:45:14 +0800</pubDate>
      
      <guid>http://cuihao.fun/ports/%E6%A0%91%E4%B8%AD%E4%B8%A4%E4%B8%AA%E8%8A%82%E7%82%B9%E7%9A%84%E6%9C%80%E4%BD%8E%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</guid>
      <description>在《剑指Offer》7.2 章中，面试案例：树中两个节点的最低公共祖先，记录了如下面试流程： 面试官：让我们做一个编程题目吧。输入树的两个节点，求他们的最低公共祖先</description>
    </item>
    
  </channel>
</rss>